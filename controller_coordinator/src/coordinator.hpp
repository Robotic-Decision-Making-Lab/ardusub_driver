#include "controller_manager_msgs/srv/configure_controller.hpp"
#include "controller_manager_msgs/srv/list_controllers.hpp"
#include "controller_manager_msgs/srv/load_controller.hpp"
#include "controller_manager_msgs/srv/set_hardware_component_state.hpp"
#include "controller_manager_msgs/srv/switch_controller.hpp"
#include "controller_manager_msgs/srv/unload_controller.hpp"
#include "rclcpp/rclcpp.hpp"
#include "std_srvs/srv/set_bool.hpp"

// auto-generated by generate_parameter_library
#include <controller_coordinator/controller_coordinator_parameters.hpp>

namespace coordinator
{

class ControllerCoordinator : public rclcpp::Node
{
public:
  ControllerCoordinator();

  ~ControllerCoordinator() override = default;

private:
  // we need clients to:
  // 1. list the loaded controllers
  // 2. unload any loaded controllers
  // 3. load the controllers
  // 4. configure the controllers
  // 5. activate/deactivate the hardware
  // 6. activate/deactivate the controllers
  std::shared_ptr<rclcpp::Client<controller_manager_msgs::srv::ListControllers>> list_controllers_client_;
  std::shared_ptr<rclcpp::Client<controller_manager_msgs::srv::UnloadController>> unload_controller_client_;
  std::shared_ptr<rclcpp::Client<controller_manager_msgs::srv::LoadController>> load_controller_client_;
  std::shared_ptr<rclcpp::Client<controller_manager_msgs::srv::ConfigureController>> configure_controller_client_;
  std::shared_ptr<rclcpp::Client<controller_manager_msgs::srv::SetHardwareComponentState>> hardware_client_;
  std::shared_ptr<rclcpp::Client<controller_manager_msgs::srv::SwitchController>> switch_controller_client_;

  // create a user-facing service that will allow users to activate/deactivate the hardware and all controllers
  std::shared_ptr<rclcpp::Service<std_srvs::srv::SetBool>> activate_system_service_;

  // pre-configure the activate/deactivate service messages
  // these won't change, so we can set them up once
  std::shared_ptr<controller_manager_msgs::srv::SetHardwareComponentState::Request> activate_hardware_request_;
  std::shared_ptr<controller_manager_msgs::srv::SetHardwareComponentState::Request> deactivate_hardware_request_;
  std::shared_ptr<controller_manager_msgs::srv::SwitchController::Request> activate_controllers_request_;
  std::shared_ptr<controller_manager_msgs::srv::SwitchController::Request> deactivate_controllers_request_;

  // parameters from the generate_parameter_library
  std::shared_ptr<controller_coordinator::ParamListener> param_listener_;
  controller_coordinator::Params params_;

  // we need separate callback groups for the clients and service
  std::shared_ptr<rclcpp::CallbackGroup> service_callback_group_;
  std::shared_ptr<rclcpp::CallbackGroup> client_callback_group_;
};

}  // namespace coordinator
