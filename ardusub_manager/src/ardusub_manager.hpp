// Copyright 2024, Evan Palmer
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <memory>

#include "geographic_msgs/msg/geo_point_stamped.hpp"
#include "geometry_msgs/msg/pose_stamped.hpp"
#include "mavros_msgs/srv/command_home.hpp"
#include "mavros_msgs/srv/message_interval.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/lifecycle_node.hpp"
#include "tf2_ros/transform_broadcaster.h"

// auto-generated by generate_parameter_library
#include "ardusub_manager_parameters.hpp"

namespace ardusub_manager
{

using CallbackReturn = rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn;

class ArduSubManager : public rclcpp_lifecycle::LifecycleNode
{
public:
  ArduSubManager();

  CallbackReturn on_configure(const rclcpp_lifecycle::State & previous_state) override;

  CallbackReturn on_activate(const rclcpp_lifecycle::State & previous_state) override;

  CallbackReturn on_deactivate(const rclcpp_lifecycle::State & previous_state) override;

  CallbackReturn on_cleanup(const rclcpp_lifecycle::State & previous_state) override;

  CallbackReturn on_shutdown(const rclcpp_lifecycle::State & previous_state) override;

private:
  // Inspiration for the following two methods was taken from the Orca4 project here:
  // https://github.com/clydemcqueen/orca4/blob/77152829e1d65781717ca55379c229145d6006e9/orca_base/src/manager.cpp#L407
  void set_message_rate(int64_t msg_id, double rate) const;
  void set_message_rates(const std::vector<int64_t> & msg_ids, const std::vector<double> & rates) const;

  std::shared_ptr<ardusub_manager::ParamListener> param_listener_;
  ardusub_manager::Params params_;

  std::shared_ptr<rclcpp::Subscription<geometry_msgs::msg::PoseStamped>> pose_sub_;
  std::unique_ptr<tf2_ros::TransformBroadcaster> tf_broadcaster_;

  bool set_ekf_origin_{false};
  std::shared_ptr<rclcpp::Publisher<geographic_msgs::msg::GeoPointStamped>> ekf_origin_pub_;
  std::shared_ptr<rclcpp::TimerBase> set_ekf_origin_timer_;

  std::string prefix_{""};
  std::shared_ptr<rclcpp::Client<mavros_msgs::srv::MessageInterval>> set_message_intervals_client_;
  std::shared_ptr<rclcpp::CallbackGroup> set_intervals_callback_group_;
  std::shared_ptr<rclcpp::TimerBase> set_intervals_timer_;
};

}  // namespace ardusub_manager
